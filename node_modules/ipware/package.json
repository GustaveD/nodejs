{
  "_args": [
    [
      {
        "raw": "node-ipware",
        "scope": null,
        "escapedName": "node-ipware",
        "name": null,
        "rawSpec": "node-ipware",
        "spec": "/nfs/2014/j/jrosamon/http/MyWebSite/TUTO/NODE/node-ipware",
        "type": "directory"
      },
      "/nfs/2014/j/jrosamon/http/MyWebSite/TUTO/NODE"
    ]
  ],
  "_from": "node-ipware",
  "_id": "ipware@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/ipware",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-ipware",
    "scope": null,
    "escapedName": "node-ipware",
    "name": null,
    "rawSpec": "node-ipware",
    "spec": "/nfs/2014/j/jrosamon/http/MyWebSite/TUTO/NODE/node-ipware",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "file:node-ipware",
  "_shasum": "c1f575526343c8158fe20ebc54c3fea1ded98f6b",
  "_shrinkwrap": null,
  "_spec": "node-ipware",
  "_where": "/nfs/2014/j/jrosamon/http/MyWebSite/TUTO/NODE",
  "author": {
    "name": "Val Neekman @ Neekware Inc."
  },
  "bugs": {
    "url": "https://github.com/un33k/node-ipware/issues"
  },
  "dependencies": {},
  "description": "Returns the real IP address of users in Node.js",
  "devDependencies": {
    "mocha": "~2.0.0"
  },
  "gitHead": "fe2bff14421d89725f8a6f203b2e58c2f986ba7a",
  "homepage": "https://github.com/un33k/node-ipware",
  "keywords": [
    "ip address",
    "client IP address",
    "user IP address"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "ipware",
  "optionalDependencies": {},
  "readme": "Node IPware\n====================\n\n**A Node application to retrieve user's IP address**\n\n[![Build Status](https://secure.travis-ci.org/un33k/node-ipware.png?branch=master)](http://travis-ci.org/un33k/node-ipware)\n[![Downloads](http://img.shields.io/npm/dm/ipware.svg)](https://npmjs.org/package/ipware)\n\n\nOverview\n====================\n\n**Best attempt** to get user's (client's) real ip-address while keeping it **DRY**.\n\nHow to install\n====================\n\n    1. npm install ipware\n    2. git clone http://github.com/un33k/node-ipware\n        a. npm install node-ipware\n    3. wget https://github.com/un33k/node-ipware/zipball/master\n        a. unzip the downloaded file\n        b. npm install node-ipware\n\nHow to use\n====================\n\n   ```javascript\n    // In your js file (e.g. app.js)\n    var get_ip = require('ipware')().get_ip;\n    app.use(function(req, res, next) {\n        var ip_info = get_ip(req);\n        console.log(ip_info);\n        // { clientIp: '127.0.0.1', clientIpRoutable: false }\n        next();\n    });\n\n    // `get_ip` also adds two fields to your request object\n    // 1. `clientIp`, 2. `clientIpRoutable`\n    // Where:\n    //    `clientIp` holds the client's IP address\n    //    'clientIpRoutable` is `true` if user's IP is `public`. (externally route-able)\n    //                       is `false` if user's IP is `private`. (not externally route-able)\n\n    // Advanced option: By default the left most address in the `HTTP_X_FORWARDED_FOR` or `X_FORWARDED_FOR`\n    // is returned.  However, depending on your preference and needs, you can change this\n    // behavior by passing the `right_most_proxy=True` to the API.\n    // Note: Not all proxies are equal. So left to right or right to left preference is not a\n    // rule that all proxy servers follow.\n\n    var ip_info = get_ip(req, right_most_proxy=True)\n   ```\n\nAdvanced users:\n====================\n\n   ```javascript\n    // 1. Trusted Proxies:\n    // *************************\n    // To only get client ip addresses from your own trusted proxy server(s), use `get_trusted_ip()`.\n    // In your js file (e.g. app.js)\n    var get_trusted_ip = require('ipware')().get_trusted_ip;\n    var trusted_proxies = ['177.144.11.100', '177.144.11.101'];\n    app.use(function(req, res, next) {\n        var ip_info = get_trusted_ip(req, trusted_proxies);\n        console.log(ip_info);\n        // { clientIp: '177.100.44.22', clientIpRoutable: true }\n        next();\n    });\n\n    // Alternatively, you can pass in the trusted proxies via the configuration file.\n    {\n      ...\n      \"IPWARE_TRUSTED_PROXY_LIST\": [\n        '177.144.11.100',\n        '177.144.11.101'\n      ],\n      ...\n    }\n\n    // 2. Customizable configuration file:\n    // ***********************************\n    // You can also use your own config file as below.\n    // for `IPWARE_HTTP_HEADER_PRECEDENCE_ORDER` items, the\n    // check is done from top to bottom where the request `headers`\n    // is examined for the existence of the IP address field.\n\n    // All lists that start with `IPV` are examined and if an IP\n    // address starts with any of those patterns the IP is considered\n    // `private`, otherwise the IP is considered `public` which means\n    // the IP is externally routable. (reachable through the Internet :)\n\n    // Simply copy the following content into a JSON file and\n    // modify it to suit your needs and place it in your project\n    // under version control.\n\n    // Then you can use it like:\n    // var get_ip = require('ipware')('../path/to/your/conf.json').get_ip;\n\n    {\n      \"IPWARE_HTTP_HEADER_PRECEDENCE_ORDER\": [\n        \"HTTP_X_FORWARDED_FOR\",\n        \"HTTP_CLIENT_IP\",\n        \"HTTP_X_REAL_IP\",\n        \"HTTP_X_FORWARDED\",\n        \"HTTP_X_CLUSTER_CLIENT_IP\",\n        \"HTTP_FORWARDED_FOR\",\n        \"HTTP_FORWARDED\",\n        \"HTTP_VIA\",\n        \"X_FORWARDED_FOR\",\n        \"REMOTE_ADDR\"\n      ],\n\n      \"IPWARE_HTTP_HEADER_PROXY_PRECEDENCE_ORDER\": [\n        \"HTTP_X_FORWARDED_FOR\",\n        \"X_FORWARDED_FOR\"\n      ],\n\n      \"IPWARE_TRUSTED_PROXY_LIST\": [\n      ],\n\n      \"IPV4_EXTERNALLY_NON_ROUTABLE_IP_PREFIX\": [\n        \"0.\",\n      ],\n\n      \"IPV4_CLASS_A_PRIVATE_BLOCK_IP_PREFIX\": [\n        \"10.\"\n      ],\n\n      \"IPV4_LOCAL_LINK_BLOCK_IP_PREFIX\": [\n        \"169.254.\"\n      ],\n\n      \"IPV4_CLASS_B_PRIVATE_BLOCK_IP_PREFIX\": [\n        \"172.16.\",\n        \"172.17.\",\n        \"172.18.\",\n        \"172.19.\",\n        \"172.20.\",\n        \"172.21.\",\n        \"172.22.\",\n        \"172.23.\",\n        \"172.24.\",\n        \"172.25.\",\n        \"172.26.\",\n        \"172.27.\",\n        \"172.28.\",\n        \"172.29.\",\n        \"172.30.\",\n        \"172.31.\"\n      ],\n\n      \"IPV4_EXAMPLE_CODE_DOCUMENTATION_IP_PREFIX\": [\n        \"192.0.2.\"\n      ],\n\n      \"IPV4_CLASS_C_PRIVATE_BLOCK_IP_PREFIX\": [\n        \"192.168.\"\n      ],\n\n      \"IPV4_BRODCAST_IP_PREFIX\": [\n        \"255.255.255.\"\n      ],\n\n      \"IPV4_LOOPBACK_IP_PREFIX\": [\n        \"127.\"\n      ],\n\n      \"IPV6_EXAMPLE_CODE_DOCUMENTATION_IP_PREFIX\": [\n        \"2001:db8:\"\n      ],\n\n      \"IPV6_PRIVATE_BLOCK_IP_PREFIX\": [\n        \"fc00:\"\n      ],\n\n      \"IPV6_LINK_LOCAL_UNICAST_IP_PREFIX\": [\n        \"fe80:\"\n      ],\n\n      \"IPV6_MULTICAST_IP_PREFIX\": [\n        \"ff00:\"\n      ],\n\n      \"IPV6_LOOPBACK_IP_PREFIX\": [\n        \"::1\"\n      ]\n    }\n\n\n   ```\n\nRunning the tests\n====================\n\nTo run the tests against the current environment:\n\n    npm test\n\nLicense\n====================\n\nReleased under a ([MIT](LICENSE)) license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/un33k/node-ipware.git"
  },
  "scripts": {
    "test": "mocha --reporter spec test/*_test.js"
  },
  "version": "1.0.0"
}
